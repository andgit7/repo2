---


- name: Install K8S
  hosts: servers_K8SALL
  become: yes
  
  

  tasks:
    - name: update
      shell: apt update && apt upgrade -y

    - name: install packages 
      yum:
         name:
           - curl
           - apt-transport-https
           - git
           - iptables-persistent
           - cowsay
         state: present      
  



#    - name: install packages 
#      shell: apt install curl -y && apt install apt-transport-https -y && apt install git -y && apt install iptables-persistent -y && apt install cowsay -y
#      register: instpack   
#    - debug:
#       var: instpack
      
    - name: swap off 
      shell: swapoff -a
      register: swapoff      
    - debug:
       var: swapoff

    - name: edit fstab
      lineinfile: dest=/etc/fstab
              regexp='^/swap.img.*$'
              insertbefore=BOF
              line='#/swap.img       none    swap    sw      0       0'


    - name: add file 1
      copy: 
       dest: /etc/modules-load.d/k8s.conf
       content: |
         br_netfilter
         overlay
      register: addf1   
    - debug:
       var: addf1

      
    - name: module core download 
      shell: modprobe br_netfilter && modprobe overlay
      register: mcd      
    - debug:
       var: mcd
      
    - name: test modules core 
      shell: lsmod | egrep "br_netfilter|overlay"
      register: tmc      
    - debug:
       var: tmc
      
    - name: add file 2
      copy: 
       dest: /etc/sysctl.d/k8s.conf 
       content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
      register: addf2   
    - debug:
       var: addf2
      
    - name: ally parameters 
      shell: sysctl --system
      register: allyp      
    - debug:
       var: allyp
       

#    - name: install containerd
#      shell: apt install containerd -y
#      register: instcont   
#    - debug:
#       var: instcont
#
#      
#    - name: install docker
#      shell: apt install docker.io -y
#      register: instdock   
#    - debug:
#       var: instdock


       
    - name: add key docker
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      register: adddock   
    - debug:
       var: adddock
       
    - name: add repository
      shell: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      

    - name: install docker 
      yum:
         name:
           - docker-ce
         state: present
      register: instdock   
    - debug:
       var: instdock


    - name: user right
      shell: usermod -aG docker $USER


    - name: enable docker
      shell: systemctl enable docker
      register: endock   
    - debug:
       var: endock       
      
    - name: add file 3
      copy: 
       dest: /etc/docker/daemon.json 
       content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
               "max-size": "100m"
            },
            "storage-driver": "overlay2",
            "storage-opts": [
            "overlay2.override_kernel_check=true"
            ]
          }
        
          
      register: addf3   
    - debug:
       var: addf3
       
    - name: restart docker
      shell: systemctl restart docker
      register: redock   
    - debug:
       var: redock
       
       
    - name: install kubernetes
      shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      register: inskub   
    - debug:
       var: inskub
       
       
    - name: add file 4
      copy: 
       dest: /etc/apt/sources.list.d/kubernetes.list 
       content: |
          deb https://apt.kubernetes.io/ kubernetes-xenial main
          
      register: addf4   
    - debug:
       var: addf4 
       
       
    - name: apt update
      shell: apt update -y
      register: aptup   
    - debug:
       var: aptup

    - name: install packages 
      yum:
         name:
           - kubelet
           - kubeadm
           - kubectl
         state: present 
       
#    - name: install kubernetes packeges
#      shell: apt install kubelet kubeadm kubectl -y
#      register: inskubpack   
#    - debug:
#       var: inskubpack

              
    - name: update off
      shell: apt-mark hold kubelet kubeadm kubectl
      register: upoff   
    - debug:
       var: upoff     
         

        
- name: Install K8S37
  hosts: servers_K8SMASTER
  become: yes
  
  tasks:
    - name: init pod network  
      shell: kubeadm init --pod-network-cidr=10.0.20.0/16
      register: inpod   
    - debug:
       var: inpod  
  
    - name: edit export variables
      lineinfile: dest=/etc/environment

              line='export KUBECONFIG=/etc/kubernetes/admin.conf' 
              

    - name: install CNI
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      register: instcni   
    - debug:
       var: instcni
       
    - name: firewall
      shell: iptables -I INPUT 1 -p tcp --match multiport --dports 6443,2379:2380,10250:10252 -j ACCEPT
      register: fiw   
    - debug:
       var: fiw       
       
    - name: firewall enable
      shell: netfilter-persistent save
      register: fiw1   
    - debug:
       var: fiw1       

- name: Install K8S Workers
  hosts: servers_K8SWORKERS
  become: yes
  
  tasks:
    - name: firewall workers
      shell: iptables -I INPUT 1 -p tcp --match multiport --dports 10250,30000:32767 -j ACCEPT
      register: fiww   
    - debug:
       var: fiww       
       
    - name: firewall enable
      shell: netfilter-persistent save
      register: fiww1   
    - debug:
       var: fiww1  
       
#  kubeadm token create --print-join-command    #command on masternode for add workernode
# https://stackoverflow.com/questions/54608441/kubectl-connectivity-issue  fix error on kubectl cluster-info 

#add config file on workers node, vzyat ego na masternode v /etc/kubernetes/admin.conf
#mkdir -p $HOME/.kube
#sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#sudo chown $(id -u):$(id -g) $HOME/.kube/config 